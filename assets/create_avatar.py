#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–∫ –¥–ª—è Telegram –±–æ—Ç–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∂–µ–Ω—Å–∫–æ–≥–æ —Ü–∏–∫–ª–∞
"""

from PIL import Image, ImageDraw, ImageFont
import math
import os

def create_cycle_avatar():
    """–°–æ–∑–¥–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ü–∏–∫–ª–∞ –∏ –∂–µ–Ω—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏"""
    
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 512x512 –ø–∏–∫—Å–µ–ª–µ–π
    size = 512
    img = Image.new('RGBA', (size, size), (255, 255, 255, 0))
    draw = ImageDraw.Draw(img)
    
    # –¶–µ–Ω—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    center = size // 2
    
    # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
    for i in range(size):
        for j in range(size):
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç —Ä–æ–∑–æ–≤–æ–≥–æ –∫ —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–º—É
            distance = math.sqrt((i - center)**2 + (j - center)**2)
            if distance < center:
                ratio = distance / center
                r = int(255 - ratio * 100)  # –û—Ç 255 –¥–æ 155
                g = int(182 - ratio * 100)  # –û—Ç 182 –¥–æ 82
                b = int(193 - ratio * 50)   # –û—Ç 193 –¥–æ 143
                img.putpixel((i, j), (r, g, b, 255))
    
    # –†–∏—Å—É–µ–º –∫—Ä—É–≥ —Ü–∏–∫–ª–∞ (28 –¥–Ω–µ–π)
    cycle_radius = 180
    day_angle = 2 * math.pi / 28
    
    for day in range(28):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—É –∏ —Ü–≤–µ—Ç
        if day < 5:  # –ú–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è
            color = (220, 53, 69)  # –ö—Ä–∞—Å–Ω—ã–π
            size_dot = 12
        elif day < 13:  # –§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∞–∑–∞
            color = (255, 193, 7)  # –ñ–µ–ª—Ç—ã–π
            size_dot = 10
        elif day < 16:  # –û–≤—É–ª—è—Ü–∏—è
            color = (40, 167, 69)  # –ó–µ–ª–µ–Ω—ã–π
            size_dot = 16
        else:  # –õ—é—Ç–µ–∏–Ω–æ–≤–∞—è —Ñ–∞–∑–∞
            color = (108, 117, 125)  # –°–µ—Ä—ã–π
            size_dot = 10
        
        # –ü–æ–∑–∏—Ü–∏—è —Ç–æ—á–∫–∏
        angle = day * day_angle - math.pi / 2  # –ù–∞—á–∏–Ω–∞–µ–º —Å–≤–µ—Ä—Ö—É
        x = center + cycle_radius * math.cos(angle)
        y = center + cycle_radius * math.sin(angle)
        
        # –†–∏—Å—É–µ–º —Ç–æ—á–∫—É
        draw.ellipse([x - size_dot//2, y - size_dot//2, x + size_dot//2, y + size_dot//2], 
                    fill=color, outline=(255, 255, 255, 255), width=2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ
    female_symbol_radius = 60
    draw.ellipse([center - female_symbol_radius, center - female_symbol_radius, 
                  center + female_symbol_radius, center + female_symbol_radius], 
                outline=(255, 255, 255, 255), width=8)
    
    # –ö—Ä–µ—Å—Ç —Å–Ω–∏–∑—É
    cross_size = 40
    draw.line([center, center + female_symbol_radius - 10, 
               center, center + female_symbol_radius + cross_size], 
              fill=(255, 255, 255, 255), width=8)
    draw.line([center - cross_size//2, center + female_symbol_radius + cross_size//2, 
               center + cross_size//2, center + female_symbol_radius + cross_size//2], 
              fill=(255, 255, 255, 255), width=8)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    # –õ—É–Ω–∞ –∏ –∑–≤–µ–∑–¥—ã –≤–æ–∫—Ä—É–≥
    moon_radius = 25
    moon_x = center - 200
    moon_y = center - 150
    draw.ellipse([moon_x - moon_radius, moon_y - moon_radius, 
                  moon_x + moon_radius, moon_y + moon_radius], 
                fill=(255, 255, 255, 200))
    
    # –ó–≤–µ–∑–¥—ã
    stars = [(center + 150, center - 120, 8), (center + 180, center + 100, 6), 
             (center - 150, center + 80, 10)]
    for star_x, star_y, star_size in stars:
        draw.ellipse([star_x - star_size, star_y - star_size, 
                      star_x + star_size, star_y + star_size], 
                    fill=(255, 255, 255, 180))
    
    return img

def create_minimalist_avatar():
    """–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫—É"""
    
    size = 512
    img = Image.new('RGBA', (size, size), (255, 255, 255, 0))
    draw = ImageDraw.Draw(img)
    
    center = size // 2
    
    # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω –æ—Ç —Ä–æ–∑–æ–≤–æ–≥–æ –∫ —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–º—É
    for i in range(size):
        for j in range(size):
            distance = math.sqrt((i - center)**2 + (j - center)**2)
            if distance < center:
                ratio = distance / center
                r = int(255 - ratio * 80)
                g = int(182 - ratio * 80)
                b = int(193 - ratio * 40)
                img.putpixel((i, j), (r, g, b, 255))
    
    # –ë–æ–ª—å—à–æ–π –∫—Ä—É–≥ —Å —Ç–æ—á–∫–∞–º–∏ —Ü–∏–∫–ª–∞
    cycle_radius = 200
    for day in range(28):
        angle = day * (2 * math.pi / 28) - math.pi / 2
        
        if day < 5:
            color = (255, 255, 255, 255)
            size_dot = 8
        elif day < 13:
            color = (255, 255, 255, 200)
            size_dot = 6
        elif day < 16:
            color = (255, 255, 255, 255)
            size_dot = 12
        else:
            color = (255, 255, 255, 150)
            size_dot = 6
        
        x = center + cycle_radius * math.cos(angle)
        y = center + cycle_radius * math.sin(angle)
        
        draw.ellipse([x - size_dot//2, y - size_dot//2, x + size_dot//2, y + size_dot//2], 
                    fill=color)
    
    # –°–∏–º–≤–æ–ª –≤ —Ü–µ–Ω—Ç—Ä–µ - —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç–æ–∫
    flower_center = center
    petal_count = 6
    petal_radius = 40
    
    for i in range(petal_count):
        angle = i * (2 * math.pi / petal_count)
        petal_x = flower_center + petal_radius * math.cos(angle)
        petal_y = flower_center + petal_radius * math.sin(angle)
        
        draw.ellipse([petal_x - 15, petal_y - 15, petal_x + 15, petal_y + 15], 
                    fill=(255, 255, 255, 255))
    
    # –¶–µ–Ω—Ç—Ä —Ü–≤–µ—Ç–∫–∞
    draw.ellipse([flower_center - 20, flower_center - 20, 
                  flower_center + 20, flower_center + 20], 
                fill=(255, 182, 193, 255))
    
    return img

def create_modern_avatar():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫—É —Å –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏"""
    
    size = 512
    img = Image.new('RGBA', (size, size), (255, 255, 255, 0))
    draw = ImageDraw.Draw(img)
    
    center = size // 2
    
    # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
    for i in range(size):
        for j in range(size):
            distance = math.sqrt((i - center)**2 + (j - center)**2)
            if distance < center:
                ratio = distance / center
                # –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞
                r = int(255 - ratio * 60)
                g = int(105 + ratio * 80)  # –û—Ç 105 –¥–æ 185
                b = int(180 + ratio * 50)  # –û—Ç 180 –¥–æ 230
                img.putpixel((i, j), (r, g, b, 255))
    
    # –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ü–∏–∫–ª–∞
    cycle_radius = 180
    for day in range(28):
        angle = day * (2 * math.pi / 28) - math.pi / 2
        
        # –†–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–∑
        if day < 5:  # –ú–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è - —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏
            color = (255, 255, 255, 255)
            x = center + cycle_radius * math.cos(angle)
            y = center + cycle_radius * math.sin(angle)
            # –†–∏—Å—É–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
            points = [(x, y - 8), (x - 8, y + 6), (x + 8, y + 6)]
            draw.polygon(points, fill=color)
            
        elif day < 13:  # –§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è - –∫–≤–∞–¥—Ä–∞—Ç—ã
            color = (255, 255, 255, 220)
            x = center + cycle_radius * math.cos(angle)
            y = center + cycle_radius * math.sin(angle)
            draw.rectangle([x - 6, y - 6, x + 6, y + 6], fill=color)
            
        elif day < 16:  # –û–≤—É–ª—è—Ü–∏—è - –±–æ–ª—å—à–∏–µ –∫—Ä—É–≥–∏
            color = (255, 255, 255, 255)
            x = center + cycle_radius * math.cos(angle)
            y = center + cycle_radius * math.sin(angle)
            draw.ellipse([x - 10, y - 10, x + 10, y + 10], fill=color)
            
        else:  # –õ—é—Ç–µ–∏–Ω–æ–≤–∞—è - —Ä–æ–º–±—ã
            color = (255, 255, 255, 180)
            x = center + cycle_radius * math.cos(angle)
            y = center + cycle_radius * math.sin(angle)
            points = [(x, y - 6), (x - 6, y), (x, y + 6), (x + 6, y)]
            draw.polygon(points, fill=color)
    
    # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç - —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
    inner_radius = 80
    for i in range(4):
        angle = i * (math.pi / 2)
        x = center + inner_radius * math.cos(angle)
        y = center + inner_radius * math.sin(angle)
        draw.ellipse([x - 20, y - 20, x + 20, y + 20], 
                    fill=(255, 255, 255, 200))
    
    # –¶–µ–Ω—Ç—Ä
    draw.ellipse([center - 25, center - 25, center + 25, center + 25], 
                fill=(255, 255, 255, 255))
    
    return img

def main():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–≤–∞—Ç–∞—Ä–æ–∫"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–∫
    os.makedirs('avatars', exist_ok=True)
    
    print("üé® –°–æ–∑–¥–∞—é –∞–≤–∞—Ç–∞—Ä–∫–∏ –¥–ª—è –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    avatars = [
        ('cycle_detailed', create_cycle_avatar, '–ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞ —Å —Ü–∏–∫–ª–æ–º'),
        ('minimalist', create_minimalist_avatar, '–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞'),
        ('modern', create_modern_avatar, '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è')
    ]
    
    for name, func, description in avatars:
        try:
            img = func()
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
            img.save(f'avatars/{name}.png')
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è JPEG
            rgb_img = Image.new('RGB', img.size, (255, 255, 255))
            rgb_img.paste(img, mask=img.split()[-1])
            rgb_img.save(f'avatars/{name}.jpg', 'JPEG', quality=95)
            print(f"‚úÖ {description} - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ {name}.png –∏ {name}.jpg")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {name}: {e}")
    
    print("\nüéâ –í—Å–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω—ã!")
    print("üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ avatars/")
    print("\nüí° –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –±–æ—Ç–∞:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ @BotFather –≤ Telegram")
    print("2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /setuserpic")
    print("3. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞")
    print("4. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫")

if __name__ == "__main__":
    main()
