export class DatePicker {
  constructor() {
    this.months = [
      '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
      '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
    ];
    
    this.weekDays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
   * @param {number} year - –≥–æ–¥
   * @param {number} month - –º–µ—Å—è—Ü (0-11)
   * @param {Date} selectedDate - –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns {Object} –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
   */
  createCalendar(year, month, selectedDate = null) {
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const startDate = new Date(firstDay);
    startDate.setDate(startDate.getDate() - (firstDay.getDay() === 0 ? 6 : firstDay.getDay() - 1));
    
    const keyboard = [];
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    keyboard.push([
      { text: '‚óÄÔ∏è', callback_data: `prev_month` },
      { text: `${this.months[month]} ${year}`, callback_data: 'ignore' },
      { text: '‚ñ∂Ô∏è', callback_data: `next_month` }
    ]);
    
    // –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    const weekRow = this.weekDays.map(day => ({ text: day, callback_data: 'ignore' }));
    keyboard.push(weekRow);
    
    // –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –¥–Ω–∏
    let currentDate = new Date(startDate);
    for (let week = 0; week < 6; week++) {
      const weekRow = [];
      
      for (let day = 0; day < 7; day++) {
        const dateStr = currentDate.toISOString().split('T')[0];
        const dayNumber = currentDate.getDate();
        const isCurrentMonth = currentDate.getMonth() === month;
        const isToday = this.isToday(currentDate);
        const isSelected = selectedDate && this.isSameDate(currentDate, selectedDate);
        const isFuture = currentDate > new Date();
        const isTooOld = this.isTooOld(currentDate);
        
        let buttonText = dayNumber.toString();
        let callbackData = 'ignore';
        
        if (!isFuture && !isTooOld) {
          callbackData = `select_date_${dateStr}`;
          
          if (isToday) {
            buttonText = `üìç${dayNumber}`;
          } else if (isSelected) {
            buttonText = `‚úÖ${dayNumber}`;
          } else if (isCurrentMonth) {
            buttonText = dayNumber.toString();
          } else {
            buttonText = `‚ö™${dayNumber}`;
          }
        } else if (isFuture) {
          buttonText = `üö´${dayNumber}`;
        } else if (isTooOld) {
          buttonText = `‚è∞${dayNumber}`;
        } else {
          buttonText = `‚ö™${dayNumber}`;
        }
        
        weekRow.push({ text: buttonText, callback_data: callbackData });
        currentDate.setDate(currentDate.getDate() + 1);
      }
      
      keyboard.push(weekRow);
    }
    
    // –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞
    keyboard.push([
      { text: 'üìÖ –°–µ–≥–æ–¥–Ω—è', callback_data: 'select_today' },
      { text: 'üìÖ –í—á–µ—Ä–∞', callback_data: 'select_yesterday' }
    ]);
    
    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.push([
      { text: 'üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞', callback_data: 'back_to_method_selection' },
      { text: '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é', callback_data: 'select_manual' }
    ]);
    
    return {
      reply_markup: {
        inline_keyboard: keyboard
      }
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç
   * @returns {Object} –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
   */
  createQuickDatePicker() {
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    
    const quickDates = [];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—ã–µ –¥–∞—Ç—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 7 –¥–Ω–µ–π
    for (let i = 0; i < 7; i++) {
      const date = new Date(today);
      date.setDate(date.getDate() - i);
      
      if (i === 0) {
        quickDates.push({ text: `üìç –°–µ–≥–æ–¥–Ω—è (${this.formatDate(date)})`, callback_data: `select_date_${date.toISOString().split('T')[0]}` });
      } else if (i === 1) {
        quickDates.push({ text: `üìÖ –í—á–µ—Ä–∞ (${this.formatDate(date)})`, callback_data: `select_date_${date.toISOString().split('T')[0]}` });
      } else {
        quickDates.push({ text: `${this.formatDate(date)}`, callback_data: `select_date_${date.toISOString().split('T')[0]}` });
      }
    }
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
    const keyboard = [];
    for (let i = 0; i < quickDates.length; i += 2) {
      const row = quickDates.slice(i, i + 2);
      if (row.length === 1) {
        row.push({ text: 'üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å', callback_data: 'show_calendar' });
      }
      keyboard.push(row);
    }
    
    keyboard.push([
      { text: 'üìÖ –ü–æ–ª–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å', callback_data: 'show_calendar' },
      { text: '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é', callback_data: 'manual_input' }
    ]);
    
    keyboard.push([
      { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }
    ]);
    
    return {
      reply_markup: {
        inline_keyboard: keyboard
      }
    };
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param {Date} date - –¥–∞—Ç–∞
   * @returns {string} –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
   */
  formatDate(date) {
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    return `${day}.${month}`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param {Date} date - –¥–∞—Ç–∞
   * @returns {string} –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
   */
  formatFullDate(date) {
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    return `${day}.${month}.${year}`;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π
   * @param {Date} date - –¥–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns {boolean} true –µ—Å–ª–∏ –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è
   */
  isToday(date) {
    const today = new Date();
    return this.isSameDate(date, today);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –¥–≤–µ –¥–∞—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏
   * @param {Date} date1 - –ø–µ—Ä–≤–∞—è –¥–∞—Ç–∞
   * @param {Date} date2 - –≤—Ç–æ—Ä–∞—è –¥–∞—Ç–∞
   * @returns {boolean} true –µ—Å–ª–∏ –¥–∞—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
   */
  isSameDate(date1, date2) {
    return date1.getFullYear() === date2.getFullYear() &&
           date1.getMonth() === date2.getMonth() &&
           date1.getDate() === date2.getDate();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–π (–±–æ–ª–µ–µ –≥–æ–¥–∞ –Ω–∞–∑–∞–¥)
   * @param {Date} date - –¥–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns {boolean} true –µ—Å–ª–∏ –¥–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è
   */
  isTooOld(date) {
    const oneYearAgo = new Date();
    oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);
    return date < oneYearAgo;
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ YYYY-MM-DD
   * @param {string} dateStr - —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã
   * @returns {Date} –æ–±—ä–µ–∫—Ç –¥–∞—Ç—ã
   */
  parseDate(dateStr) {
    const [year, month, day] = dateStr.split('-').map(Number);
    return new Date(year, month - 1, day);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
   * @returns {Object} –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
   */
  createMonthYearPicker() {
    const currentDate = new Date();
    const currentYear = currentDate.getFullYear();
    const currentMonth = currentDate.getMonth();
    
    const keyboard = [];
    
    // –ì–æ–¥—ã
    const years = [];
    for (let year = currentYear - 1; year <= currentYear; year++) {
      years.push({ text: year.toString(), callback_data: `select_year_${year}` });
    }
    keyboard.push(years);
    
    // –ú–µ—Å—è—Ü—ã
    const months = [];
    for (let i = 0; i < 12; i++) {
      const monthName = this.months[i];
      const isCurrent = i === currentMonth;
      months.push({ 
        text: isCurrent ? `üìç${monthName}` : monthName, 
        callback_data: `select_month_${i}` 
      });
    }
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –º–µ—Å—è—Ü—ã –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 3
    for (let i = 0; i < months.length; i += 3) {
      keyboard.push(months.slice(i, i + 3));
    }
    
    keyboard.push([
      { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }
    ]);
    
    return {
      reply_markup: {
        inline_keyboard: keyboard
      }
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
   * @param {string} title - –∑–∞–≥–æ–ª–æ–≤–æ–∫
   * @param {string} description - –æ–ø–∏—Å–∞–Ω–∏–µ
   * @returns {string} —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  createDateSelectionMessage(title = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É', description = '') {
    const today = new Date();
    const formattedToday = this.formatFullDate(today);
    
    return `
üìÖ ${title}

${description}

üóìÔ∏è –°–µ–≥–æ–¥–Ω—è: ${formattedToday}

üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ü–∏–∫–ª–∞:
‚Ä¢ üìç - —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ üìÖ - –≤—á–µ—Ä–∞  
‚Ä¢ ‚úÖ - –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
‚Ä¢ üö´ - –±—É–¥—É—â–∞—è –¥–∞—Ç–∞ (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)
‚Ä¢ ‚è∞ - —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è –¥–∞—Ç–∞ (–±–æ–ª–µ–µ –≥–æ–¥–∞)
‚Ä¢ ‚ö™ - –¥—Ä—É–≥–æ–π –º–µ—Å—è—Ü (–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞)
`;
  }
}
